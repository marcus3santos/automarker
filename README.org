#+TITLE: Automarker

AUTOMARKER is an automated marker for lisp program assignments where
the students' assignment solutions have been exported from D2L.

* Dependencies

- Portacle ([[https://portacle.github.io/]]) is a complete plug-and-play IDE for Common Lisp. It contains the following goodies:
  - Emacs: [[https://www.gnu.org/software/emacs/download.html]]
  - Steel Bank Common Lisp (SBCL): [[http://www.sbcl.org/getting.html]]
  - Quicklisp: [[https://www.quicklisp.org/beta/#installation]]

* Installation (on a Mac)

Clone this repository in your Quicklisp's ~projects~ directory on Portacle:
  #+begin_src shell
  $ cd /Applications/portacle/projects/
  $ git clone https://github.com/marcus3santos/automarker.git  
  #+end_src

* Usage

** Marking

*** Preamble
To mark an assignment, the automarker needs the following files:
- a folder or a zip file exported by D2L containing the files submitted by the students
- the D2L exported assignment grades file (a CSV file)
- the test cases lisp file for the particular assignment you want to mark 

*** Steps
0. On D2L, export the grades (as a CSV file) for the particular
   assignment you want to mark. When generating this file, select the
   following /Export Options/ on D2L:
     - Username
     - Points grade
     - Last name
     - First name
     Below is an example of a CSV file exported by D2L:
     #+begin_example
     Username,Last Name,First Name,Lab 0X Points Grade <Course  Data>,End-of-Line-Indicator 
     #TTiger,Tigertongue,Tim,,#
     #Patrick97,Pearson,Patrick,,#
     #Towhander,Twohands,Tony,,#
     #Zain1997,Zodson,Zain,,#
     #Coopercat,Cooper,Cain,,#
     #Hammermann,Odinson,Thor,,#
     #CastleSword03,Vampireson,Alucard,,#
     #TarkovIsAwesone,Handerson,Timb,,#
     #+end_example
1. Launch Portacle by double clicking on the portacle app.
1. To load the automarker, type the following commands on the REPL:
   #+begin_src lisp
     CL-USER> (ql:quickload :automarker)
     CL-USER> (in-package :automarker)
     AUTOMARKER> 
   #+end_src
2. To invoke the automarker to mark the students' assignment solutions, type the command below on the REPL:
   #+begin_src lisp
     AUTOMARKER> (automark submissions is-zipped grades-export-file test-cases-file results due-datetime weights)
   #+end_src
   where:
   - ~submissions~ is a string representing the full path the folder
     or zip file exported by D2L containing the files submitted by the
     students.
   - ~is-zipped~ is a boolean (i.e., it can be the lisp constants ~T~
     or ~NIL~) that informs whether ~submissions~ is a folder or a zip
     file. Put ~T~ if ~submissions~ is a zip file and ~NIL~ if it is
     just a regular folder.
   - ~grades-export-file~ is a string representing the full path for
     the D2L assignment grades exported by D2L
  - ~test-cases-file~ is a string representing the full path for the test cases lisp file.
  - ~results~ is a string representing the full path for a folder
    where you want automarker to store the results (the students'
    marks and log files). For example, if you provide the path
    "/Users/johndoe/A1/" , the automarker will create its
    files/subfolders inside folder ~/Users/johndoe/A1/~.
  - ~due-datetime~ is a list representing the date and time the
    assignment is due, formatted as follows ~'(<MMM> <DD> <HHMM>
    <PP>)~, where ~<MMM>~ are the three first letters of the name of
    the month (in upper or lower case), e.g., sep, ~<DD>~ is a number
    representing the month, e.g., 3 (or 03), ~<HHMM>~ is a number with
    at most four digits representing the time, 2 digits for the hour,
    and 2 digits for minutes, e.g., 0145, and ~<PP>~ is either ~am~ or
    ~pm~. Here are examples of valid due dates:
    #+begin_example
    '(sep 1 0100 pm)
    '(oct 23 1200 pm)
    '(Dec 11 1200 pm)
    #+end_example
  - ~weights~ (optional) is either ~NIL~ or a list of pairs
    ~(<function-name> <weight>)~, where: ~<function-name>~ is the name
    of the test function defined in the unit test, and ~<weight>~ is a
    number from [0, 100] representing the weight of that function in
    the calculation of the total mark. Note: the sum of weight values
    has to be equal to 100. If weights is not provided, then the
    tested functions have equal weight, and the total mark is
    calculated by dividing the number of correct results by the total
    number of test cases and multiplying the result by 100.

** Output
The log file ~log.txt~, created in the automarker's root folder,
contains historical information about the evaluation of students'
assignments and the generation of the respective grades spreadsheet
file.

The automarker generates three other files as the result of marking
the students' assignments:

- A csv spreadsheet file called ~grades.csv~ containing the students' assignment marks. This is a D2L-importable grades file and it is created based on the ~grades-export-file~ provided by the user (see item 2 above). Below is an examples of such file::
   #+begin_example
   Username,Last Name,First Name,Lab 0X Points Grade <Course Data>,End-of-Line-Indicator
   #TTiger,Tigertongue,Tim,100.0,# 
   #Patrick97,Pearson,Patrick,72.5,#
   #Towhander,Twohands,Tony,100.0,#
   #Zain1997,Zodson,Zain,95.5,#
   #Coopercat,Cooper,Cain,100.0,#
   #Hammermann,Odinson,Thor,0.0,#
   #+end_example
   Note:
   - If a student exists in the grades export but not in the
     submissions folder, then the grade in the ~grades.csv~ file will
     not be included in the generated ~grades.csv file~ .
- A Feedback folder that holds feedback files for the students. The
  general structure is like this: Consider Timb Handerson who did not
  get a full grade. His feedback file will be as such:
  #+begin_example
  Feedback on your assignment solution

  Unit test results:
  
  ((Pass TEST-DEPOSIT (EQUAL (DEPOSIT 20) 130))
   (Pass TEST-DEPOSIT (EQUAL (DEPOSIT 10) 110))
   (Pass TEST-DEPOSIT (NOT (DEPOSIT 10001)))
   (Fail TEST-WITHDRAW (EQUAL (WITHDRAW 60) 10))
   (Pass TEST-WITHDRAW (NOT (WITHDRAW 80)))
   (Pass TEST-WITHDRAW (NOT (WITHDRAW 10001)))
   (Fail TEST-WITHDRAW (EQUAL (WITHDRAW 20) 70))
   (Fail TEST-WITHDRAW (EQUAL (WITHDRAW 10) 90)))
  #+end_example
- A zipped version of the feedback folder. To be uploaded into D2L.

** Test cases
Test cases must follow a specific format in order to be used within
the automarker.  As an example, suppose the assignment requires the
students to submit a file that includes two functions: a ~fact~
function that gives the factorial of a number, and a ~avg~ function
that gives the average of a list of numbers. Then, the test cases lisp
file will be something like this:
#+begin_src lisp
(deftest test-fact ()
  ;; Include any global variable declarations here
  (check
    (equal (fact 5) 120)
    (equal (fact 6) 720)
    (equal (fact 7) 5040)

(deftest test-avg ()
  ;; Include any global variable declarations here
  (check
    (equal (avg '(5 8 10 2 12)) 7.4)
    (equal (avg '(0 0 0 0 0 0)) 0)
    (equal (avg '(1 2 0)) 1)

(defun unit-test ()
  "Calls the test cases and 'forgets' the functions that were tested."
  (test-fact)
  (fmakunbound 'fact) ; Removes the function definition from the global environment,
		      ; so the next time around the unit test is done on a freshly loaded version of this function.
  (test-avg)
  (fmakunbound 'avg))
  
(unit-test) 
#+end_src
Notice that it is still possible to include more complex forms of
tests, but the general idea is to create assertions (e.g., ~(check
(equal ... ...) ... ~) that call the function being tested and check
if returns the expected value defined in the assertions.

If you wish to make test cases that do not utilize ~equal~, then just
make sure that a ~t~ or ~NIL~ is returned by the assertion.

Any errors that the student's solution could raise during runtime will
be handled by the automarker and reported as appropriate.

** Other functions

In case you wish to mark one specific submission or test your test
case file, you can use the following function:
#+begin_example
mark-std-solution (student-solution test-cases-dir)
---------------------------------------------------
Description:  Loads the student-solution file, loads the test cases, runs
              the test cases, and returns the percentage of correct results over total results

Inputs:       1) student-solution [string]: The directory for the solution of the student.
              2) test-cases-dir [string]: The directory for the test cases file. This will be used to test the solution of the students for the current assignment.

Outputs:      [list] A list of the following:
              1) [string] The grade of the student.
              2) [string] A comment that describes if there was a runtime error while loading the student submission or not
              3) [string] A description of what happened during runtime (from exceptions to conditions to whatever) 
              4) [list] The results of marking each of the test cases.

Side-effects: This function utilizes the global variable *results* while running. In the beginning by reseting it to nil, and at the end by updating it with the current
              student's submission results.
---------------------------------------------------
#+end_example

Usage Example: Say there was a student that you want to mark their
submissions independantly from the other students. You can simply take
their lisp submission file, say ~"/home/John/mysol.lisp"~ , and the
test cases lisp file "/home/john/test-cases.lisp"~. You would use the
automarker as follows: (assuming you have already installed automarker
as shown above)
#+begin_src lisp
    CL-USER> (ql:quickload :automarker)  ; Loading the automarker
    CL-USER> (in-package :automarker) ; becoming the automarker package
    AUTOMARKER> (mark-std-solution "/home/John/mysol.lisp" "/home/John/test-cases.lisp") 
    ("100.0" OK "No runtime errors"
     (("Pass" T TEST-DEPOSIT (EQUAL (DEPOSIT 20) 130))
      ("Pass" T TEST-DEPOSIT (EQUAL (DEPOSIT 10) 110))
      ("Pass" T TEST-DEPOSIT (NOT (DEPOSIT 10001)))
      ("Pass" T TEST-WITHDRAW (EQUAL (WITHDRAW 60) 10))
      ("Pass" T TEST-WITHDRAW (NOT (WITHDRAW 80)))
      ("Pass" T TEST-WITHDRAW (NOT (WITHDRAW 10001)))
      ("Pass" T TEST-WITHDRAW (EQUAL (WITHDRAW 20) 70))
      ("Pass" T TEST-WITHDRAW (EQUAL (WITHDRAW 10) 90))))
    AUTOMARKER>
#+end_src

* License and Credits

See LICENSE for usage permissions. See AUTHORS for credits.




